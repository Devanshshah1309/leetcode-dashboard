Difficulty,Title,Frequency,Acceptance Rate,Link,Topics
HARD,Viewers Turned Streamers,100.0,0.4329896907216495,https://leetcode.com/problems/viewers-turned-streamers,Database
HARD,Find Beautiful Indices in the Given Array II,100.0,0.25753440566749897,https://leetcode.com/problems/find-beautiful-indices-in-the-given-array-ii,"Two Pointers, String, Binary Search, Rolling Hash, String Matching, Hash Function"
HARD,Frequencies of Shortest Supersequences,100.0,0.2329282902618518,https://leetcode.com/problems/frequencies-of-shortest-supersequences,"Array, String, Bit Manipulation, Graph, Topological Sort, Enumeration"
MEDIUM,Maximum Amount of Money Robot Can Earn,100.0,0.2968649542295564,https://leetcode.com/problems/maximum-amount-of-money-robot-can-earn,"Array, Dynamic Programming, Matrix"
HARD,Count the Number of Arrays with K Matching Adjacent Elements,100.0,0.3716353582174514,https://leetcode.com/problems/count-the-number-of-arrays-with-k-matching-adjacent-elements,"Math, Combinatorics"
HARD,Smallest Range Covering Elements from K Lists,87.3,0.6980393606084836,https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists,"Array, Hash Table, Greedy, Sliding Window, Sorting, Heap (Priority Queue)"
MEDIUM,Most Stones Removed with Same Row or Column,70.1,0.621070246833758,https://leetcode.com/problems/most-stones-removed-with-same-row-or-column,"Hash Table, Depth-First Search, Union Find, Graph"
MEDIUM,Queue Reconstruction by Height,70.1,0.7397032337528031,https://leetcode.com/problems/queue-reconstruction-by-height,"Array, Binary Indexed Tree, Segment Tree, Sorting"
MEDIUM,Split Array into Consecutive Subsequences,70.1,0.5138119467694345,https://leetcode.com/problems/split-array-into-consecutive-subsequences,"Array, Hash Table, Greedy, Heap (Priority Queue)"
HARD,Trapping Rain Water,70.1,0.6412328147598803,https://leetcode.com/problems/trapping-rain-water,"Array, Two Pointers, Dynamic Programming, Stack, Monotonic Stack"
MEDIUM,Maximal Square,70.1,0.48087141371980074,https://leetcode.com/problems/maximal-square,"Array, Dynamic Programming, Matrix"
MEDIUM,Find Duplicate Subtrees,60.1,0.5991374317958308,https://leetcode.com/problems/find-duplicate-subtrees,"Hash Table, Tree, Depth-First Search, Binary Tree"
HARD,Sliding Window Maximum,60.1,0.4719098701459679,https://leetcode.com/problems/sliding-window-maximum,"Array, Queue, Sliding Window, Heap (Priority Queue), Monotonic Queue"
MEDIUM,Make Lexicographically Smallest Array by Swapping Elements,60.1,0.604216330376169,https://leetcode.com/problems/make-lexicographically-smallest-array-by-swapping-elements,"Array, Union Find, Sorting"
MEDIUM,House Robber,60.1,0.5192208961467982,https://leetcode.com/problems/house-robber,"Array, Dynamic Programming"
HARD,Burst Balloons,60.1,0.6053181916348715,https://leetcode.com/problems/burst-balloons,"Array, Dynamic Programming"
MEDIUM,Longest Palindromic Substring,60.1,0.35189271725910737,https://leetcode.com/problems/longest-palindromic-substring,"Two Pointers, String, Dynamic Programming"
HARD,Candy,60.1,0.44293628239981314,https://leetcode.com/problems/candy,"Array, Greedy"
MEDIUM,Jump Game II,60.1,0.4107501931489611,https://leetcode.com/problems/jump-game-ii,"Array, Dynamic Programming, Greedy"
MEDIUM,Make Sum Divisible by P,60.1,0.39578674081173887,https://leetcode.com/problems/make-sum-divisible-by-p,"Array, Hash Table, Prefix Sum"
HARD,Apply Operations to Maximize Frequency Score,60.1,0.37081054201889607,https://leetcode.com/problems/apply-operations-to-maximize-frequency-score,"Array, Binary Search, Sliding Window, Sorting, Prefix Sum"
MEDIUM,Rotting Oranges,60.1,0.558468481215474,https://leetcode.com/problems/rotting-oranges,"Array, Breadth-First Search, Matrix"
MEDIUM,Minimum Cost Tree From Leaf Values,60.1,0.6766606229399926,https://leetcode.com/problems/minimum-cost-tree-from-leaf-values,"Array, Dynamic Programming, Stack, Greedy, Monotonic Stack"
MEDIUM,Kth Smallest Element in a Sorted Matrix,60.1,0.6315358293300043,https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix,"Array, Binary Search, Sorting, Heap (Priority Queue), Matrix"
